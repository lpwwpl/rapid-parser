#line 1 "D:\\source\\repos\\rapid\\\\lexer.cpp"

#line 3 "D:\\source\\repos\\rapid\\\\lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer xxFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

#ifdef yyalloc
#define xxalloc_ALREADY_DEFINED
#else
#define yyalloc xxalloc
#endif

#ifdef yyrealloc
#define xxrealloc_ALREADY_DEFINED
#else
#define yyrealloc xxrealloc
#endif

#ifdef yyfree
#define xxfree_ALREADY_DEFINED
#else
#define yyfree xxfree
#endif

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

inline int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int Lexer::yylex()

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 125
#define YY_END_OF_BUFFER 126
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[404] =
    {   0,
        0,    0,    2,    2,    0,    0,  126,  125,   46,    4,
        1,  125,  115,  123,  107,  108,  119,  116,  106,  117,
       97,  118,  125,  120,  100,  121,   99,  122,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,   16,   15,  124,   14,  104,  114,  105,
      125,  109,  110,  125,  125,    2,    3,   46,    0,    6,
        0,    5,    0,   98,  103,  102,  101,  124,  124,  124,
      124,  124,  124,  124,  124,   35,  124,  124,  124,  124,
      124,  124,   24,   26,  124,  124,  124,  124,  124,  124,
      124,   44,  124,  124,  124,  124,  124,  124,  124,  124,

      124,  124,  124,  124,  124,   51,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,    0,    0,    8,    0,
        2,    0,    6,    0,    5,    0,  111,  124,  124,   43,
      124,  124,  124,  124,  124,  124,  124,  124,  124,   50,
      124,  124,  124,  124,  124,  124,   45,  124,  124,   25,
      124,   71,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,   80,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,   73,  124,  124,  124,  124,
      124,  124,  124,    7,    0,    0,    0,    0,  113,  124,
      124,   58,   57,   70,   41,   23,  124,  124,  124,   29,

      124,  124,  124,  124,  124,  124,  124,  124,   52,   90,
      124,  124,  124,  124,  124,  124,  124,   78,  124,   89,
       63,  124,   39,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,   83,  124,   82,   37,   10,   31,  124,
       18,  124,   47,  124,   11,  124,  124,  124,   12,  124,
        0,    0,  112,  124,  124,  124,  124,   76,  124,  124,
      124,  124,  124,   32,  124,  124,  124,  124,  124,   48,
       92,   22,  124,  124,  124,  124,   61,   60,  124,  124,
      124,  124,  124,  124,   81,   49,  124,  124,  124,  124,
       86,  124,  124,  124,  124,  124,  124,  124,  124,  124,

      124,   34,  124,  124,   84,  124,  124,  124,  124,  124,
       30,   53,  124,  124,  124,  124,  124,  124,  124,  124,
       64,  124,  124,    9,  124,  124,   94,  124,   33,  124,
      124,  124,  124,   72,  124,  124,  124,   85,   87,  124,
      124,  124,  124,  124,   54,   59,  124,  124,   42,   91,
      124,   40,  124,   38,  124,  124,   20,  124,   17,   19,
       96,   93,  124,  124,  124,  124,  124,  124,   77,  124,
      124,  124,  124,  124,  124,  124,  124,  124,   36,  124,
       55,  124,   28,   13,  124,   21,   66,   79,  124,   27,
       69,   68,   56,   62,   65,   95,  124,   74,   67,   88,

      124,   75,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    1,    1,    1,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   17,
       17,   17,   17,   17,   17,   17,   18,   19,   20,   21,
       22,   23,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,    1,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   40,   71,   72,   73,   74,   75,   76,   77,
       78,   79,   80,   40,   81,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[82] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    1,
        1
    } ;

static const flex_int16_t yy_base[411] =
    {   0,
        0,   65,  212,  202,    0,    0,  183,  823,   82,   84,
      823,   83,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  164,   61,  138,  823,   68,  823,  134,   67,   54,
       71,   68,   62,   74,    0,   73,   56,   81,   73,  103,
      111,  121,  125,  175,  133,  163,  120,  823,  823,  823,
      149,  823,  823,  151,  169,    0,  823,  111,  111,  823,
      170,    0,  158,  823,  823,  823,  823,    0,  167,  154,
      160,  162,   79,  167,  212,    0,  177,  181,  176,  179,
      185,  189,    0,    0,  209,  197,  186,  216,  223,  217,
      226,    0,  217,  228,  221,  227,  238,  243,  246,  241,

      257,  233,  250,  243,  240,  239,  248,  259,  265,  274,
      280,  281,  279,  283,  292,  281,  316,  324,  823,  323,
        0,  315,  316,  329,    0,   85,  823,  283,  285,    0,
      321,  302,  311,  316,  315,  328,  325,  360,  293,    0,
      318,  334,  319,  326,  332,  331,  331,  343,  338,    0,
      342,  354,  344,  352,  353,  371,  367,  360,  368,  384,
      373,  372,  382,  392,  394,  386,  394,  398,  391,  392,
      400,  410,  405,  401,  418,    0,  406,  424,  411,  425,
      420,  425,  431,  823,  433,  434,  460,  104,  823,  434,
      429,  442,  431,    0,    0,    0,  432,  433,  435,  448,

      450,  452,  447,  454,  468,  470,  468,  472,    0,    0,
      459,  462,  464,  476,  475,  493,  484,    0,  486,    0,
        0,  485,    0,  492,  481,  485,  490,  487,  495,  514,
      513,  504,  516,    0,  510,    0,    0,    0,    0,  520,
      526,  523,    0,  528,    0,  533,  531,  533,  535,  537,
      561,  563,  823,  524,  540,  542,  532,    0,  538,  548,
      556,  553,  559,    0,  571,  561,  574,  560,  572,    0,
        0,    0,  565,  573,  583,  588,    0,    0,  586,  576,
      575,  593,  595,  585,    0,    0,  588,  587,  602,  609,
        0,  607,  606,  602,  615,  598,  600,  613,  617,  613,

      628,    0,  631,  635,    0,  618,  635,  639,  629,  626,
        0,    0,  646,  630,  649,  639,  636,  647,  660,  657,
        0,  645,  646,    0,  658,  654,    0,  660,    0,  666,
      655,  664,  677,    0,  678,  662,  679,    0,    0,  674,
      669,  671,  676,  678,    0,    0,  681,  692,    0,    0,
      690,    0,  688,    0,  702,  693,    0,  703,    0,    0,
        0,    0,  709,  715,  712,  700,  715,  722,    0,  719,
      716,  726,  729,  730,  714,  715,  732,  735,    0,  733,
        0,  722,    0,    0,  742,    0,    0,    0,  734,    0,
        0,    0,    0,    0,    0,    0,  744,    0,    0,    0,

      731,    0,  823,  804,  807,  810,  104,  813,  816,  819
    } ;

static const flex_int16_t yy_def[411] =
    {   0,
      403,    1,  404,  404,  405,  405,  403,  403,  403,  403,
      403,  406,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  403,  403,  403,
      403,  403,  403,  403,  403,  408,  403,  403,  406,  403,
      409,  410,  403,  403,  403,  403,  403,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,

      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  403,  403,  403,  403,
      408,  406,  406,  409,  410,  403,  403,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  403,  403,  403,  403,  403,  403,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,

      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      403,  403,  403,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,

      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,

      407,  407,    0,  403,  403,  403,  403,  403,  403,  403
    } ;

static const flex_int16_t yy_nxt[905] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,    8,    8,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       35,   36,   37,   35,   35,   38,   39,   40,   41,   35,
       42,   43,   44,   35,   45,   46,   35,   35,   47,   48,
       49,   50,   51,    8,   29,   30,   31,   32,   33,   34,
       35,   35,   36,   37,   35,   35,   38,   39,   40,   41,
       42,   43,   44,   35,   45,   46,   35,   35,   47,   52,
       53,   54,   55,   58,   58,   58,   58,   60,   63,   65,
       66,   72,   69,   86,   73,   75,   77,   79,   78,   83,

      188,   84,  189,   70,   87,   76,   68,   71,   74,   85,
       89,   80,   58,   58,   81,   60,   90,   82,   88,   63,
      133,  253,   72,   69,   86,   73,   75,   77,   79,   78,
       83,   91,   84,   61,   70,   87,   76,   71,   93,   74,
       85,   89,   80,   92,   81,   94,   90,   82,   97,   88,
      133,   95,   99,  119,   96,   67,  109,  116,   98,   64,
      110,   61,   91,  100,  117,  118,  118,  101,  126,   93,
      111,  119,   59,   92,  123,  127,   94,  120,   62,   97,
      130,   95,  403,   99,   96,  131,  112,  109,  116,   98,
      113,  110,  128,  114,  100,  120,   63,  101,  102,  132,

      115,  111,  103,  134,   57,  104,  105,  138,  120,  129,
      139,  130,  106,  107,   57,  108,  131,  112,  137,  140,
      124,  113,  141,  128,  114,  142,  120,   63,  145,  102,
      132,  115,  146,  103,  134,  135,  104,  105,  138,  129,
      136,  139,  147,  106,  107,  108,  143,  144,  137,  140,
      149,  151,  152,  141,  153,  155,  142,  154,  156,  145,
      148,  157,  146,  158,  403,  150,  135,  162,  165,  163,
      171,  136,  159,  147,  168,  172,  173,  143,  144,  160,
      161,  149,  151,  152,  166,  153,  155,  154,  164,  156,
      148,  169,  157,  174,  158,  150,  170,  167,  162,  165,

      163,  171,  175,  159,  168,  176,  172,  173,  177,  160,
      161,  178,  179,  180,  181,  166,  182,  183,  164,   60,
       60,  169,  184,  174,  190,  119,  170,  167,  191,  185,
      184,   59,  175,  123,  208,  176,  194,  186,  195,  177,
      198,  196,  178,  179,  180,  181,  192,  182,  183,  120,
      187,  199,  200,  209,  190,  193,  403,  197,  191,  210,
      403,  403,  211,  212,  208,   61,   61,  194,  213,  195,
      216,  198,  196,  214,  215,  217,  218,  192,  219,  124,
      120,  187,  199,  200,  209,  220,  193,  197,  201,  222,
      210,  202,  211,  221,  212,  203,  223,  225,  204,  213,

      205,  216,  206,  214,  215,  207,  217,  218,  224,  219,
      226,  227,  403,  228,  230,  220,  229,  231,  232,  201,
      222,  233,  202,  221,  234,  235,  203,  223,  225,  204,
      205,  236,  206,  237,  238,  207,  239,  240,  224,  241,
      226,  242,  227,  228,  230,  243,  229,  244,  231,  232,
      245,  247,  233,  246,  248,  234,  235,  249,  250,  251,
      252,  254,  236,  237,  238,  255,  184,  239,  240,  256,
      241,  242,  257,  186,  258,  259,  243,  244,  260,  261,
      264,  245,  247,  246,  265,  248,  187,  262,  249,  250,
      251,  252,  254,  263,  266,  267,  255,  268,  269,  270,

      256,  271,  257,  272,  258,  259,  273,  274,  260,  275,
      261,  264,  279,  280,  281,  265,  276,  187,  262,  282,
      403,  283,  284,  263,  266,  277,  267,  278,  268,  269,
      270,  271,  285,  272,  286,  287,  273,  288,  274,  289,
      275,  291,  292,  279,  280,  281,  293,  276,  294,  290,
      282,  283,  295,  284,  296,  297,  277,  301,  278,  298,
      302,  303,  285,  304,  286,  287,  305,  184,  288,  184,
      289,  306,  291,  292,  308,  299,  300,  293,  307,  294,
      290,  309,  310,  295,  311,  296,  297,  251,  301,  252,
      298,  302,  303,  312,  304,  313,  305,  314,  315,  316,

      403,  317,  306,  318,  308,  299,  300,  319,  320,  307,
      321,  309,  322,  310,  323,  311,  324,  325,  251,  326,
      252,  327,  328,  312,  329,  331,  313,  330,  314,  315,
      316,  317,  332,  333,  318,  334,  335,  319,  336,  320,
      337,  321,  338,  322,  339,  323,  324,  325,  340,  341,
      326,  342,  327,  328,  343,  329,  331,  330,  344,  403,
      345,  346,  347,  332,  333,  348,  334,  335,  349,  336,
      337,  350,  338,  351,  352,  339,  353,  403,  354,  340,
      341,  355,  342,  356,  357,  343,  358,  359,  360,  344,
      345,  361,  346,  347,  362,  363,  348,  364,  349,  365,

      366,  367,  350,  351,  368,  352,  369,  353,  354,  370,
      403,  371,  355,  372,  356,  357,  358,  359,  373,  360,
      374,  375,  361,  376,  377,  362,  363,  364,  378,  379,
      365,  366,  367,  380,  368,  381,  382,  369,  383,  384,
      370,  371,  385,  372,  386,  387,  388,  389,  373,  390,
      374,  375,  391,  392,  376,  377,  393,  394,  378,  395,
      379,  396,  397,  380,  398,  399,  381,  382,  400,  383,
      384,  401,  385,  402,  403,  386,  387,  388,  389,  403,
      390,  403,  403,  391,  392,  403,  393,  394,  403,  403,
      395,  403,  396,  397,  398,  403,  399,  403,  403,  400,

      403,  403,  401,  402,   56,   56,   56,    8,    8,    8,
       59,   59,   59,  121,  403,  121,  122,  122,  122,  125,
      403,  125,    7,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,

      403,  403,  403,  403
    } ;

static const flex_int16_t yy_chk[905] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    2,    9,    9,   10,   10,   12,   23,   26,
       26,   30,   29,   37,   31,   32,   33,   34,   33,   36,

      126,   36,  126,   29,   38,   32,  407,   29,   31,   36,
       39,   34,   58,   58,   34,   59,   39,   34,   38,   23,
       73,  188,   30,   29,   37,   31,   32,   33,   34,   33,
       36,   40,   36,   12,   29,   38,   32,   29,   41,   31,
       36,   39,   34,   40,   34,   41,   39,   34,   42,   38,
       73,   41,   43,   54,   41,   28,   45,   47,   42,   24,
       45,   59,   40,   43,   51,   51,   51,   43,   63,   41,
       45,   55,   61,   40,   61,   63,   41,   54,   22,   42,
       70,   41,    7,   43,   41,   71,   46,   45,   47,   42,
       46,   45,   69,   46,   43,   55,   55,   43,   44,   72,

       46,   45,   44,   74,    4,   44,   44,   78,   54,   69,
       79,   70,   44,   44,    3,   44,   71,   46,   77,   80,
       61,   46,   81,   69,   46,   82,   55,   55,   86,   44,
       72,   46,   87,   44,   74,   75,   44,   44,   78,   69,
       75,   79,   88,   44,   44,   44,   85,   85,   77,   80,
       89,   90,   90,   81,   91,   94,   82,   93,   95,   86,
       88,   96,   87,   97,    0,   89,   75,   98,  100,   99,
      104,   75,   97,   88,  102,  105,  106,   85,   85,   97,
       97,   89,   90,   90,  101,   91,   94,   93,   99,   95,
       88,  103,   96,  107,   97,   89,  103,  101,   98,  100,

       99,  104,  108,   97,  102,  109,  105,  106,  110,   97,
       97,  111,  112,  113,  114,  101,  115,  116,   99,  122,
      123,  103,  117,  107,  128,  120,  103,  101,  129,  117,
      118,  124,  108,  124,  139,  109,  132,  118,  133,  110,
      135,  134,  111,  112,  113,  114,  131,  115,  116,  120,
      118,  136,  137,  141,  128,  131,    0,  134,  129,  142,
        0,    0,  143,  144,  139,  122,  123,  132,  145,  133,
      148,  135,  134,  146,  147,  149,  151,  131,  152,  124,
      120,  118,  136,  137,  141,  153,  131,  134,  138,  155,
      142,  138,  143,  154,  144,  138,  156,  158,  138,  145,

      138,  148,  138,  146,  147,  138,  149,  151,  157,  152,
      159,  160,    0,  161,  162,  153,  161,  163,  164,  138,
      155,  165,  138,  154,  166,  167,  138,  156,  158,  138,
      138,  168,  138,  169,  170,  138,  171,  172,  157,  173,
      159,  174,  160,  161,  162,  175,  161,  177,  163,  164,
      178,  180,  165,  179,  181,  166,  167,  182,  183,  185,
      186,  190,  168,  169,  170,  191,  187,  171,  172,  192,
      173,  174,  193,  187,  197,  198,  175,  177,  199,  200,
      202,  178,  180,  179,  203,  181,  187,  201,  182,  183,
      185,  186,  190,  201,  204,  205,  191,  206,  207,  208,

      192,  211,  193,  212,  197,  198,  213,  214,  199,  215,
      200,  202,  217,  219,  222,  203,  216,  187,  201,  224,
        0,  225,  226,  201,  204,  216,  205,  216,  206,  207,
      208,  211,  227,  212,  228,  229,  213,  230,  214,  231,
      215,  232,  233,  217,  219,  222,  235,  216,  240,  231,
      224,  225,  241,  226,  242,  244,  216,  247,  216,  246,
      248,  249,  227,  250,  228,  229,  254,  251,  230,  252,
      231,  255,  232,  233,  257,  246,  246,  235,  256,  240,
      231,  259,  260,  241,  261,  242,  244,  251,  247,  252,
      246,  248,  249,  262,  250,  263,  254,  265,  266,  267,

        0,  268,  255,  269,  257,  246,  246,  273,  274,  256,
      275,  259,  276,  260,  279,  261,  280,  281,  251,  282,
      252,  283,  284,  262,  287,  289,  263,  288,  265,  266,
      267,  268,  290,  292,  269,  293,  294,  273,  295,  274,
      296,  275,  297,  276,  298,  279,  280,  281,  299,  300,
      282,  301,  283,  284,  303,  287,  289,  288,  304,    0,
      306,  307,  308,  290,  292,  309,  293,  294,  310,  295,
      296,  313,  297,  314,  315,  298,  316,    0,  317,  299,
      300,  318,  301,  319,  320,  303,  322,  323,  325,  304,
      306,  326,  307,  308,  328,  330,  309,  331,  310,  332,

      333,  335,  313,  314,  336,  315,  337,  316,  317,  340,
        0,  341,  318,  342,  319,  320,  322,  323,  343,  325,
      344,  347,  326,  348,  351,  328,  330,  331,  353,  355,
      332,  333,  335,  356,  336,  358,  363,  337,  364,  365,
      340,  341,  366,  342,  367,  368,  370,  371,  343,  372,
      344,  347,  373,  374,  348,  351,  375,  376,  353,  377,
      355,  378,  380,  356,  382,  385,  358,  363,  389,  364,
      365,  397,  366,  401,    0,  367,  368,  370,  371,    0,
      372,    0,    0,  373,  374,    0,  375,  376,    0,    0,
      377,    0,  378,  380,  382,    0,  385,    0,    0,  389,

        0,    0,  397,  401,  404,  404,  404,  405,  405,  405,
      406,  406,  406,  408,    0,  408,  409,  409,  409,  410,
        0,  410,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,

      403,  403,  403,  403
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[126] =
    {   0,
0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0,     };

static const flex_int16_t yy_rule_linenum[125] =
    {   0,
      107,  109,  110,  117,  119,  120,  127,  132,  138,  139,
      140,  142,  143,  144,  145,  146,  147,  148,  149,  150,
      151,  152,  153,  154,  156,  157,  158,  159,  160,  161,
      162,  163,  164,  165,  166,  167,  168,  169,  170,  171,
      172,  173,  174,  175,  176,  177,  178,  179,  180,  181,
      182,  183,  184,  187,  188,  189,  190,  191,  192,  193,
      194,  195,  199,  200,  201,  202,  203,  204,  205,  206,
      207,  208,  209,  210,  211,  212,  213,  214,  216,  217,
      218,  219,  220,  223,  224,  225,  226,  227,  228,  229,
      230,  231,  232,  233,  234,  235,  239,  240,  241,  242,

      243,  244,  245,  246,  247,  248,  249,  250,  251,  252,
      253,  254,  255,  256,  257,  258,  259,  260,  261,  262,
      263,  264,  265,  268
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lexer.l"
#line 2 "lexer.l"

#include <QString>
#include "lexer.hpp"
	//eGlobal = 0;
	//eLocal =1;
extern int lineNumber;

typedef Language::Parser::token token;
QString buf;
#define yyterminate() return( token::END )
#define YY_NO_UNISTD_H // For msvc

#line 893 "D:\\source\\repos\\rapid\\\\lexer.cpp"

#line 895 "D:\\source\\repos\\rapid\\\\lexer.cpp"

#define INITIAL 0
#define SINGLE_LINE_COMMENT_STATE 1
#define TRANS_LINES_STATE 2

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 105 "lexer.l"


#line 1088 "D:\\source\\repos\\rapid\\\\lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 404 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 823 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 125 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 125 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 126 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 107 "lexer.l"
yy_push_state(SINGLE_LINE_COMMENT_STATE);
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 109 "lexer.l"
;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 110 "lexer.l"
{
		yy_pop_state(); 
	}
	YY_BREAK

case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 117 "lexer.l"
{ lineNumber++; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 119 "lexer.l"
;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 120 "lexer.l"
{
                                        yylval->sval = new QString( yytext );
                                        return token::String;
                                }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 127 "lexer.l"
{
                                                        yylval->dval = atof(yytext);
                                                        return token::Number;
                                                }
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 132 "lexer.l"
{
                                      yylval->ival = atoi(yytext);
                                       return token::LNumber;
                     }                                     
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 138 "lexer.l"
{ return token::NumberType; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 139 "lexer.l"
{ return token::TextType; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 140 "lexer.l"
{ return token::VoidType; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 142 "lexer.l"
{ return token::WOBJ_P; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 143 "lexer.l"
{ return token::SEAM_NAME; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 144 "lexer.l"
{ return token::ZONE_P; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 145 "lexer.l"
{ return token::VEL_P; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 146 "lexer.l"
{ return token::TCP_P; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 147 "lexer.l"
{ return token::NOEOFFS; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 148 "lexer.l"
{ return token::TOOL_P; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 149 "lexer.l"
{ return token::PLEN; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 150 "lexer.l"
{ return token::MAXTIME; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 151 "lexer.l"
{ return token::TIMEFLAG; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 152 "lexer.l"
{ return token::INPOS; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 153 "lexer.l"
{ return token::CONC; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 154 "lexer.l"
{ return token::ID_P; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 156 "lexer.l"
{ return token::NOT; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 157 "lexer.l"
{ return token::IF; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 158 "lexer.l"
{return token::WELDDATA;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 159 "lexer.l"
{return token::SEAMDATA;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 160 "lexer.l"
{ return token::ELSE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 161 "lexer.l"
{ return token::ELSEIF; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 162 "lexer.l"
{ return token::THEN; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 163 "lexer.l"
{ return token::ENDIF; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 164 "lexer.l"
{ return token::RETURN; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 165 "lexer.l"
{return token::WHILE;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 166 "lexer.l"
{return token::DO;}   
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 167 "lexer.l"
{return token::ENDWHILE;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 168 "lexer.l"
{return token::TEST;}   	
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 169 "lexer.l"
{return token::ENDTEST;}   	
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 170 "lexer.l"
{return token::PROC;}  
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 171 "lexer.l"
{return token::ENDPROC;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 172 "lexer.l"
{return token::CASE;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 173 "lexer.l"
{return token::DEFAULT;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 174 "lexer.l"
{return token::AND;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 175 "lexer.l"
{return token::OR;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 176 "lexer.l"
{ return token::MOD;}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 177 "lexer.l"
{}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 178 "lexer.l"
{return token::FTRUE;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 179 "lexer.l"
{return token::FFALSE;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 180 "lexer.l"
{return token::RETRY;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 181 "lexer.l"
{return token::FOR;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 182 "lexer.l"
{return token::TO;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 183 "lexer.l"
{return token::FROM;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 184 "lexer.l"
{return token::ENDFOR;}   
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 187 "lexer.l"
{return token::ACTUNIT;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 188 "lexer.l"
{return token::MOVEABSJ;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 189 "lexer.l"
{return token::ARCLSTART;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 190 "lexer.l"
{return token::ARCL;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 191 "lexer.l"
{return token::ARCC;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 192 "lexer.l"
{return token::ARCEND;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 193 "lexer.l"
{return token::MOVEL;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 194 "lexer.l"
{return token::MOVEJ;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 195 "lexer.l"
{return token::DEACTUNIT;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 199 "lexer.l"
{return token::PERS;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 200 "lexer.l"
{return token::MODULE;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 201 "lexer.l"
{return token::ENDMODULE;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 202 "lexer.l"
{return token::TOOLDATA;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 203 "lexer.l"
{return token::SPEEDDATA;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 204 "lexer.l"
{return token::ZONEDATA;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 205 "lexer.l"
{return token::WOBJDATA;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 206 "lexer.l"
{return token::BOOL;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 207 "lexer.l"
{return token::NUM;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 208 "lexer.l"
{return token::STRING;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 209 "lexer.l"
{return token::VAR;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 210 "lexer.l"
{return token::ROBTARGET;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 211 "lexer.l"
{return token::JOINTTARGET;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 212 "lexer.l"
{return token::CONST_L;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 213 "lexer.l"
{return token::TPWRITE;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 214 "lexer.l"
{return token::FNULL;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 216 "lexer.l"
{return token::WAITTIME;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 217 "lexer.l"
{return token::SET;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 218 "lexer.l"
{return token::RESET;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 219 "lexer.l"
{return token::TASK;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 220 "lexer.l"
{return token::STEP;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 223 "lexer.l"
{return token::ACCSET;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 224 "lexer.l"
{return token::VELSET;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 225 "lexer.l"
{return token::SETDO;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 226 "lexer.l"
{return token::WAITDI;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 227 "lexer.l"
{return token::WAITUNTIL;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 228 "lexer.l"
{return token::OFFS;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 229 "lexer.l"
{return token::FUNC;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 230 "lexer.l"
{ return token::ENDFUNC; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 231 "lexer.l"
{return token::INOUT;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 232 "lexer.l"
{return token::RELTOOl;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 233 "lexer.l"
{return token::RECORD;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 234 "lexer.l"
{return token::ENDRECORD;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 235 "lexer.l"
{return token::PULSEDO;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 239 "lexer.l"
{return token::DOT;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 240 "lexer.l"
{return token::ASS;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 241 "lexer.l"
{return token::EQ;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 242 "lexer.l"
{ return token::SEMICOLON; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 243 "lexer.l"
{ return token::GE; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 244 "lexer.l"
{ return token::NE; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 245 "lexer.l"
{ return token::LE; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 246 "lexer.l"
{ return token::LR; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 247 "lexer.l"
{ return token::RR; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 248 "lexer.l"
{ return token::COMMA; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 249 "lexer.l"
{ return token::LC; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 250 "lexer.l"
{ return token::RC; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 251 "lexer.l"
{ return token::LBRACE; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 252 "lexer.l"
{ return token::RBRACE; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 253 "lexer.l"
{return token::RAPID_NAN;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 254 "lexer.l"
{return token::RAPID_NAN;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 255 "lexer.l"
{return token::RAPID_NAN;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 256 "lexer.l"
{return token::SPLASH;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 257 "lexer.l"
{return token::JIN;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 258 "lexer.l"
{ return token::ADD; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 259 "lexer.l"
{ return token::SUB; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 260 "lexer.l"
{ return token::DIVIDE; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 261 "lexer.l"
{ return token::MUL; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 262 "lexer.l"
{ return token::COLON; }  
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 263 "lexer.l"
{return token::LT;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 264 "lexer.l"
{return token::GT;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 265 "lexer.l"
{return token::DOLAR;}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 268 "lexer.l"
{
                                                        yylval->sval = new QString( yytext );
                                                        return( token::Identifier );
                                             }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 275 "lexer.l"
ECHO;
	YY_BREAK
#line 1826 "D:\\source\\repos\\rapid\\\\lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SINGLE_LINE_COMMENT_STATE):
case YY_STATE_EOF(TRANS_LINES_STATE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 404 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 404 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 403);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 275 "lexer.l"


